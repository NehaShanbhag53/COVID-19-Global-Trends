# -*- coding: utf-8 -*-
"""Covid19_Global_Trends.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14zvQqAzTzGkaxJlpJnzRAjQ2qdb7vzoD
"""

import pandas as pd

path= "/content/time_series_covid19_confirmed_global.csv"
df= pd.read_csv(path)
df.head()

print(df.isnull().sum())

df_cleaned = df.dropna()

print(df_cleaned.isnull().sum())

df['Province/State'] = df['Province/State'].fillna('Unknown')

df['Lat'] = df['Lat'].fillna('Unknown')

df['Long'] = df['Long'].fillna('Unknown')

print(df['Province/State'].isnull().sum())
print(df['Lat'].isnull().sum())
print(df['Long'].isnull().sum())

df_melted = df.melt(id_vars=['Country/Region'], value_vars= df.columns[4:], var_name='Date',  value_name="Cases")
df_melted["Date"] = pd.to_datetime(df_melted["Date"], format="mixed", dayfirst="True", errors='coerce')
df_melted['Date'] = df_melted['Date'].dt.strftime('%Y-%m-%d')
print(df_melted.tail(500))

df_melted['Rolling_avarage_cases'] = df_melted.groupby('Country/Region')['Cases'].transform(lambda x: x.rolling(7, min_periods=1).mean())
print(df_melted.tail(500))

df_melted['New Cases'] = df_melted.groupby('Country/Region')['Cases'].diff().fillna(0)
print(df_melted.tail(500))

deaths = pd.read_csv("/content/time_series_covid19_deaths_global.csv")

death_melted = deaths.melt(id_vars=['Country/Region'], value_vars= deaths.columns[4:], var_name="Date", value_name='Deaths')
death_melted['Date'] = pd.to_datetime(death_melted['Date'], format='mixed', dayfirst=True, errors='coerce')

df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='mixed', errors='coerce', dayfirst=True)

df_merged = pd.merge(df_melted, death_melted, on=["Country/Region", "Date"])
df_merged["Mortality Rate"] = (( df_merged['Deaths']/ df_merged['Cases'].replace(0, pd.NA)) *100)
print(df_merged.tail(500))

recovered = pd.read_csv("/content/time_series_covid19_recovered_global.csv")

recovered_melted = recovered.melt(id_vars=['Country/Region'], value_vars = recovered.columns[4:], var_name="Date", value_name="Recovery")

df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='mixed', errors='coerce', dayfirst=True)
recovered_melted['Date'] = pd.to_datetime(recovered_melted['Date'], format='mixed', errors='coerce', dayfirst=True)

df_merged= pd.merge(df_melted, recovered_melted, on=['Country/Region', 'Date'])
df_merged['Recovery Rate'] = ((df_merged['Recovery'] / df_merged['Cases'].replace(0, pd.NA))*100)

print(df_merged.iloc[225: 232])

import matplotlib.pyplot as plt
global_cases = df_melted.groupby('Date')['Cases'].sum().reset_index()

plt.figure(figsize=(20,10))
plt.plot(global_cases['Date'], global_cases['Cases'], marker= 'o', markevery = 7, linestyle = '--')
plt.title('Global cases over time' , fontsize=16)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Total Cases', fontsize=14)
plt.xticks(rotation=45)
plt.grid = True
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

global_mortality = df_merged.groupby('Date')['Mortality Rate'].sum().reset_index()

plt.figure(figsize= (20, 10))
plt.plot(global_mortality['Date'], global_mortality['Mortality Rate'], marker='o', markevery=7, linestyle='--')
plt.title("Global Deaths over Cases", fontsize=16)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Mortality Rate', fontsize=14)
plt.xticks(rotation=45)
plt.grid=True
plt.tight_layout()
plt.show()

import plotly.express as px
import pandas as pd
import numpy as np


df = pd.DataFrame({
    'Date': pd.date_range(start='2021-01-01', periods=150),
    'Vaccination Rate': np.linspace(0, 75, 150),
    'Recovery Rate': np.linspace(50, 90, 150),
    'Death Rate': np.linspace(10, 2, 150)
})


df_long = df.melt(id_vars='Date', value_vars=['Vaccination Rate', 'Recovery Rate', 'Death Rate'],
                  var_name='Metric', value_name='Percentage')


fig = px.area(df_long, x='Date', y='Percentage', color='Metric',
              title='Vaccination and Recovery Trends Over Time',
              labels={'Percentage': 'Percentage (%)', 'Date': 'Date'})

fig.update_layout(yaxis_range=[0, 100])
fig.show()

import pandas as pd
import plotly.express as px

# Sample data: 'Country/Region' and metric column, e.g., 'Mortality Rate'
df = pd.DataFrame({
    'Country/Region': ['United States', 'India', 'Brazil', 'Russia', 'South Africa'],
    'Mortality Rate': [1.79, 1.34, 2.35, 1.78, 3.15]
})

fig = px.choropleth(df,
                    locations='Country/Region',
                    locationmode='country names',
                    color='Mortality Rate',
                    color_continuous_scale='Reds',
                    title='COVID-19 Mortality Rate by Country',
                    labels={'Mortality Rate': 'Mortality Rate (%)'})

fig.update_geos(showcoastlines=True, coastlinecolor="RebeccaPurple")
fig.show()

